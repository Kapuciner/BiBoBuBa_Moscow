//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Potentia/New Input/MageControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MageControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MageControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MageControls"",
    ""maps"": [
        {
            ""name"": ""Mage"",
            ""id"": ""0a5be7b7-d66e-4856-9b22-e8d1fe876506"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1a1f4136-78ae-4af3-b96f-e89b63fc0c62"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ScrollRight"",
                    ""type"": ""Button"",
                    ""id"": ""8a66062b-56af-455c-a039-bd35b1828d93"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cast"",
                    ""type"": ""Button"",
                    ""id"": ""305273b9-ae57-487e-a7b2-2141b9da86c2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollLeft"",
                    ""type"": ""Button"",
                    ""id"": ""24646d50-05be-4e20-a9c1-038e580d1111"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""GamepadStick"",
                    ""id"": ""2789673a-a031-46bb-a949-b21b59825c13"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c7c0462a-e7f0-40bc-b32b-4ffccc6bbe38"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""aca2131c-dc95-4926-a4e8-cff99cbb5612"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fc1bc8a0-5a22-4b8d-94a4-cc11ee9e71d4"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f07b5324-f270-40d2-a5d2-a099ac646e6c"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""wasd"",
                    ""id"": ""ff5b2cd5-3bac-4c2c-b0c2-f3581d672eda"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0a51bf5a-e591-4bda-9412-487bffb19b10"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard1;Keyboard2"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a92bf6e4-0a77-43fb-ae97-aaf76483e913"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard1;Keyboard2"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dfa5c9bc-6bec-4d3f-b9d6-50511a0d1c3e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard1;Keyboard2"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cfa32299-df50-495d-aee6-92197c43421f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard1;Keyboard2"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0f4e4d64-e7db-4bb8-baaf-176339a86885"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard2;Keyboard1"",
                    ""action"": ""ScrollRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6206ee13-3e3e-4a17-b531-6a7ad63e4430"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""ScrollRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82ea5594-279b-4d37-8376-30fc30076862"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard2;Keyboard1"",
                    ""action"": ""Cast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7d4af9a-bfb9-4d7d-9e1d-6dad5d2ad599"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Cast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6345a6ee-8bdc-4576-b937-5e21552f956b"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""ScrollLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard1"",
            ""bindingGroup"": ""Keyboard1"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard2"",
            ""bindingGroup"": ""Keyboard2"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""GamePad"",
            ""bindingGroup"": ""GamePad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Mage
        m_Mage = asset.FindActionMap("Mage", throwIfNotFound: true);
        m_Mage_Move = m_Mage.FindAction("Move", throwIfNotFound: true);
        m_Mage_ScrollRight = m_Mage.FindAction("ScrollRight", throwIfNotFound: true);
        m_Mage_Cast = m_Mage.FindAction("Cast", throwIfNotFound: true);
        m_Mage_ScrollLeft = m_Mage.FindAction("ScrollLeft", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mage
    private readonly InputActionMap m_Mage;
    private List<IMageActions> m_MageActionsCallbackInterfaces = new List<IMageActions>();
    private readonly InputAction m_Mage_Move;
    private readonly InputAction m_Mage_ScrollRight;
    private readonly InputAction m_Mage_Cast;
    private readonly InputAction m_Mage_ScrollLeft;
    public struct MageActions
    {
        private @MageControls m_Wrapper;
        public MageActions(@MageControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Mage_Move;
        public InputAction @ScrollRight => m_Wrapper.m_Mage_ScrollRight;
        public InputAction @Cast => m_Wrapper.m_Mage_Cast;
        public InputAction @ScrollLeft => m_Wrapper.m_Mage_ScrollLeft;
        public InputActionMap Get() { return m_Wrapper.m_Mage; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MageActions set) { return set.Get(); }
        public void AddCallbacks(IMageActions instance)
        {
            if (instance == null || m_Wrapper.m_MageActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MageActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @ScrollRight.started += instance.OnScrollRight;
            @ScrollRight.performed += instance.OnScrollRight;
            @ScrollRight.canceled += instance.OnScrollRight;
            @Cast.started += instance.OnCast;
            @Cast.performed += instance.OnCast;
            @Cast.canceled += instance.OnCast;
            @ScrollLeft.started += instance.OnScrollLeft;
            @ScrollLeft.performed += instance.OnScrollLeft;
            @ScrollLeft.canceled += instance.OnScrollLeft;
        }

        private void UnregisterCallbacks(IMageActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @ScrollRight.started -= instance.OnScrollRight;
            @ScrollRight.performed -= instance.OnScrollRight;
            @ScrollRight.canceled -= instance.OnScrollRight;
            @Cast.started -= instance.OnCast;
            @Cast.performed -= instance.OnCast;
            @Cast.canceled -= instance.OnCast;
            @ScrollLeft.started -= instance.OnScrollLeft;
            @ScrollLeft.performed -= instance.OnScrollLeft;
            @ScrollLeft.canceled -= instance.OnScrollLeft;
        }

        public void RemoveCallbacks(IMageActions instance)
        {
            if (m_Wrapper.m_MageActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMageActions instance)
        {
            foreach (var item in m_Wrapper.m_MageActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MageActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MageActions @Mage => new MageActions(this);
    private int m_Keyboard1SchemeIndex = -1;
    public InputControlScheme Keyboard1Scheme
    {
        get
        {
            if (m_Keyboard1SchemeIndex == -1) m_Keyboard1SchemeIndex = asset.FindControlSchemeIndex("Keyboard1");
            return asset.controlSchemes[m_Keyboard1SchemeIndex];
        }
    }
    private int m_Keyboard2SchemeIndex = -1;
    public InputControlScheme Keyboard2Scheme
    {
        get
        {
            if (m_Keyboard2SchemeIndex == -1) m_Keyboard2SchemeIndex = asset.FindControlSchemeIndex("Keyboard2");
            return asset.controlSchemes[m_Keyboard2SchemeIndex];
        }
    }
    private int m_GamePadSchemeIndex = -1;
    public InputControlScheme GamePadScheme
    {
        get
        {
            if (m_GamePadSchemeIndex == -1) m_GamePadSchemeIndex = asset.FindControlSchemeIndex("GamePad");
            return asset.controlSchemes[m_GamePadSchemeIndex];
        }
    }
    public interface IMageActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnScrollRight(InputAction.CallbackContext context);
        void OnCast(InputAction.CallbackContext context);
        void OnScrollLeft(InputAction.CallbackContext context);
    }
}
